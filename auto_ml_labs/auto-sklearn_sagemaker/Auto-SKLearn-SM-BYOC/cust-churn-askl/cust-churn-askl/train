#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import json
import os
import pickle
import sys
import traceback

import pandas as pd
from sklearn import tree
import sklearn.datasets
import sklearn.metrics
import autosklearn.classification

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        print(input_files)
        # Take the set of files and read them all into a single pandas dataframe
        # Load data from the location specified by args.train (In this case, an S3 bucket).
        data = pd.read_csv(os.path.join(training_path,'train_data.csv'),index_col=False)

        # Seperate input variables and labels.
        train_X = data[[c for c in data.columns if c != 'Churn?']]
        train_Y = data[['Churn?']]
        train_X = train_X.copy()

        # Convert labels from text to indices
        train_X["State"] = train_X["State"].astype('category')
        train_X["Int'l Plan"] = train_X["Int'l Plan"].astype('category')
        train_X["VMail Plan"] = train_X["VMail Plan"].astype('category')
        
        #Train the logistic regression model using the fit method
        automl = autosklearn.classification.AutoSklearnClassifier(
            time_left_for_this_task=120,
            per_run_time_limit=30,
            tmp_folder='/tmp/autosklearn_classification_example_tmp',
        )
        automl.fit(train_X, train_Y)

        # save the model
        print(f"Saving Model to {model_path}/auto-sklearn.pkl")
        
        x = automl.show_models()
        results = automl
        
        with open(os.path.join(model_path, 'auto-sklearn.pkl'), 'wb') as out:
            pickle.dump(results, out)
        
        print('Training complete.')
        print("Leaderboard")
        print(automl.leaderboard())
        print("Show Models")
        print(automl.show_models())
        print("Final Ensemble")
        print(results)
        print('Training process complete.')
        
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
